{
  "name": "hasha",
  "version": "1.0.1",
  "description": "Hashing made simple. Get the hash of a buffer/string/stream/file.",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/sindresorhus/hasha"
  },
  "author": {
    "name": "Sindre Sorhus",
    "email": "sindresorhus@gmail.com",
    "url": "sindresorhus.com"
  },
  "bin": {
    "hasha": "cli.js"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "scripts": {
    "test": "node test.js"
  },
  "files": [
    "index.js",
    "cli.js"
  ],
  "keywords": [
    "cli-app",
    "cli",
    "hash",
    "hashing",
    "crypto",
    "hex",
    "base64",
    "md5",
    "sha1",
    "sha256",
    "sha512",
    "sum",
    "stream",
    "file",
    "fs",
    "buffer",
    "string",
    "text",
    "rev",
    "revving",
    "simple",
    "easy"
  ],
  "dependencies": {
    "is-stream": "^1.0.1",
    "meow": "^3.1.0"
  },
  "devDependencies": {
    "ava": "0.0.4",
    "is-stream": "^1.0.1"
  },
  "readme": "<h1 align=\"center\">\n\t<br>\n\t<br>\n\t<br>\n\t<img width=\"380\" src=\"https://rawgit.com/sindresorhus/hasha/master/media/logo.svg\" alt=\"hasha\">\n\t<br>\n\t<br>\n\t<br>\n\t<br>\n\t<br>\n</h1>\n\n> Hashing made simple. Get the hash of a buffer/string/stream/file.\n\n[![Build Status](https://travis-ci.org/sindresorhus/hasha.svg?branch=master)](https://travis-ci.org/sindresorhus/hasha)\n\nConvenience wrapper around the core [`crypto` Hash class](https://nodejs.org/api/crypto.html#crypto_crypto_createhash_algorithm) with simpler API and better defaults.\n\n\n## Install\n\n```\n$ npm install --save hasha\n```\n\n\n## Usage\n\n```js\nvar hasha = require('hasha');\n\nhasha('unicorn');\n//=> 'e233b19aabc7d5e53826fb734d1222f1f0444c3a3fc67ff4af370a66e7cadd2cb24009f1bc86f0bed12ca5fcb226145ad10fc5f650f6ef0959f8aadc5a594b27'\n```\n\n```js\nvar hasha = require('hasha');\n\n// hash the proccess input and output the hash sum\nprocess.stdin.pipe(hasha.stream()).pipe(process.stdout);\n```\n\n```js\nvar hasha = require('hasha');\n\n// get the MD5 hash of an image\nhasha.fromFile('unicorn.png', {algorithm: 'md5'}, function (err, hash) {\n\tconsole.log(hash);\n\t//=> '1abcb33beeb811dca15f0ac3e47b88d9'\n});\n```\n\n\n## API\n\nSee the Node.js [`crypto` docs](https://nodejs.org/api/crypto.html#crypto_crypto_createhash_algorithm) for more about hashing.\n\n### hasha(input, [options])\n\n#### input\n\n*Required*  \nType: `buffer`, `string`\n\nBuffer you want to hash.\n\nWhile strings are supported you should prefer buffers as they're faster to hash. Though if you already have a string you should not convert it to a buffer.\n\n### hasha.stream([options])\n\nReturns a [hash transform stream](https://nodejs.org/api/crypto.html#crypto_class_hash).\n\n### hasha.fromStream(input, [options], callback)\n\n#### input\n\n*Required*  \nType: `stream`\n\n#### callback(error, hash)\n\n### hasha.fromFile(input, [options], callback)\n\n#### input\n\n*Required*  \nType: `string`\n\nPath to the file to hash.\n\n#### callback(error, hash)\n\n### hasha.fromFileSync(input, [options])\n\nReturns the hash.\n\n#### input\n\n*Required*  \nType: `string`\n\nPath to the file to hash.\n\n\n## Options\n\n##### encoding\n\nType: `string`  \nDefault: `hex`  \nValues: `hex`, `base64`, `buffer`, `binary`\n\nEncoding of the returned hash.\n\n##### algorithm\n\nType: `string`  \nDefault: `sha512`  \nValues: `md5`, `sha1`, `sha256`, `sha512`, etc *([platform dependent](https://nodejs.org/api/crypto.html#crypto_crypto_createhash_algorithm))*\n\n*The `md5` algorithm is good for [file revving](https://github.com/sindresorhus/rev-hash), but you should never use `md5` or `sha1` for anything sensitive. [They're insecure.](http://googleonlinesecurity.blogspot.no/2014/09/gradually-sunsetting-sha-1.html)*\n\n\n## CLI\n\n```\n$ npm install --global hasha\n```\n\n```\n$ hasha --help\n\n  Usage\n    $ hasha <text>\n    $ cat <file> | hasha\n\n  Example\n    $ hasha unicorn --algorithm=md5\n    1abcb33beeb811dca15f0ac3e47b88d9\n\n  Options\n    --algorithm  Cipher algorithm: md5,sha1,sha256,sha512   Default: sha512s\n    --encoding   Output encoding: hex,base64,buffer,binary  Default: hex\n```\n\n\n## Resources\n\n- [Hasha: A Friendly Crypto API • DailyJS](http://dailyjs.com/2015/06/12/hasha-a-friendly-crypto-api/)\n\n\n## License\n\nMIT © [Sindre Sorhus](http://sindresorhus.com)\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/sindresorhus/hasha/issues"
  },
  "_id": "hasha@1.0.1",
  "_from": "hasha@^1.0.0"
}
